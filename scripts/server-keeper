#!/usr/bin/python3

import os
import time
import atexit
import logging
import logging.handlers
import socketserver
import sys
import json

path = os.path.dirname(os.path.dirname(os.path.realpath(__file__))) + '/'
sys.path.append(path)
import config
import socket
import threading
import utils
import errno
from signal import SIGTERM
from action import action


class Daemon(object):
    def __init__(self, pidfile, stdin='/dev/null', stdout='/dev/null', stderr='/dev/null'):
        self.stdin = stdin
        self.stdout = stdout
        self.stderr = stderr
        self.pidfile = pidfile
        pass

    def daemonize(self):
        try:
            pid = os.fork()
            if pid > 0:
                # Exit first parent.
                sys.exit(0)
        except OSError as e:
            message = "Fork #1 failed: {}\n".format(e)
            sys.stderr.write(message)
            sys.exit(1)

        # Decouple from parent environment.
        # os.chdir("/")
        os.setsid()
        os.umask(0)

        # Do second fork.
        try:
            pid = os.fork()
            if pid > 0:
                # Exit from second parent.
                sys.exit(0)
        except OSError as e:
            message = "Fork #2 failed: {}\n".format(e)
            sys.stderr.write(message)
            sys.exit(1)
        logger.info('deamon going to background, PID: {}'.format(os.getpid()))

        # Redirect standard file descriptors.
        # Comment this out to see errors in a console
        sys.stdout.flush()
        sys.stderr.flush()
        si = open(self.stdin, 'r')
        so = open(self.stdout, 'a+')
        se = open(self.stderr, 'a+')
        os.dup2(si.fileno(), sys.stdin.fileno())
        os.dup2(so.fileno(), sys.stdout.fileno())
        os.dup2(se.fileno(), sys.stderr.fileno())

        # Write pidfile.
        pid = str(os.getpid())
        open(self.pidfile, 'w+').write("{}\n".format(pid))

        # Register a function to clean up.
        atexit.register(self.delpid)

    def delpid(self):
        os.remove(self.pidfile)

    def start(self):
        # Check pidfile to see if the daemon already runs.
        try:
            pf = open(self.pidfile, 'r')
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            pid = None

        if pid:
            message = "Pidfile {} already exist. Daemon already running?\n".format(self.pidfile)
            sys.stderr.write(message)
            sys.exit(1)

        # Start daemon.
        self.daemonize()
        self.run()

    def status(self):
        """
        Get status of daemon.
        """
        try:
            pf = open(self.pidfile, 'r')
            pid = int(pf.read().strip())
            pf.close()
        except IOError:
            message = "There is not PID file. Daemon already running?\n"
            sys.stderr.write(message)
            sys.exit(1)

        try:
            procfile = open("/proc/{}/status".format(pid), 'r')
            procfile.close()
            message = "There is a process with the PID {}\n".format(pid)
            sys.stdout.write(message)
        except IOError:
            message = "There is not a process with the PID {}\n".format(self.pidfile)
            sys.stdout.write(message)

    def stop(self):
        # Get the pid from pidfile.
        try:
            pf = open(self.pidfile, 'r')
            pid = int(pf.read().strip())
            pf.close()
        except IOError as e:
            message = str(e) + "\nDaemon not running?\n"
            sys.stderr.write(message)
            sys.exit(1)

        # Try killing daemon process.
        try:
            os.kill(pid, SIGTERM)
            time.sleep(1)
        except OSError as e:
            print(str(e))
            sys.exit(1)

        try:
            if os.path.exists(self.pidfile):
                os.remove(self.pidfile)
        except IOError as e:
            message = str(e) + "\nCan not remove pid file {}".format(self.pidfile)
            sys.stderr.write(message)
            sys.exit(1)

    def restart(self):
        self.stop()
        time.sleep(1)
        self.start()

    def run(self):
        """
        You should override this method when you subclass Daemon.
        It will be called after the process has been daemonized by start() or restart().

        Example:

        class MyDaemon(Daemon):
            def run(self):
                while True:
                    time.sleep(1)
        """


class ThreadedTCPRequestHandler(socketserver.BaseRequestHandler):
    def handle(self):
        ip = self.client_address[0]
        try:
            host = socket.gethostbyaddr(ip)[0]
        except Exception:
            host = 'Unknown'
        tmp = {}
        if host not in config.allowed and ip not in config.allowed:
            msg = 'Access denied for "{0}" from {1}'.format(str(host), str(ip))
            logging.info(msg)
            response = utils.failure(msg)
        else:
            waited = False
            command = ''
            self.request.setblocking(0)
            while True:
                try:
                    tmp = self.request.recv(1024)
                    command += str(tmp, 'UTF-8')
                except socket.error as e:
                    if e.errno == errno.EWOULDBLOCK:
                        if not waited:
                            time.sleep(0.2)
                            waited = True
                            continue
                        else:
                            break
                except Exception:
                    break

            if command[0] == '{':
                pretty = json.loads(command)
                # if 'data' in pretty:
                #     del (pretty['data'])
                # if 'hash' in pretty:
                #     del (pretty['hash'])
                # if 'from' in pretty:
                #     del (pretty['from'])
                logging.info('Received command: \'{}\''.format(json.dumps(pretty)))

                tmp = json.loads(command)
                command = json.loads(command)
            response = action(command)

        try:
            self.request.setblocking(1)
            self.request.sendall(bytes(json.dumps(response), 'UTF-8'))
        except Exception as e:
            logging.error(e)
        finally:
            self.request.close()

        if 'from' in tmp and 'hash' in tmp:
            key = tmp['hash']
            del(tmp['hash'])
            utils.post_response(tmp['from'] + 'assets/components/hoster/status.php', {
                'key': key,
                'command': tmp,
                'response': response,
            })


class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
    pass


class MyDaemon(Daemon):
    def run(self):
        try:
            server = ThreadedTCPServer((config.server['address'], config.server['port']), ThreadedTCPRequestHandler)
            server_thread = threading.Thread(target=server.serve_forever)
            server_thread.daemon = True
            server_thread.start()
            server.serve_forever()
            server.allow_reuse_address = True
        except OSError as e:
            logging.error(e.strerror)
            exit(1)


if __name__ == "__main__":
    logger = logging.getLogger()
    logger.setLevel(config.log['level'])
    filehandler = logging.handlers.TimedRotatingFileHandler(
        config.log['file'],
        when='midnight',
        interval=1,
        backupCount=10
    )
    filehandler.setFormatter(logging.Formatter(fmt=config.log['format'], datefmt='%Y-%m-%d %H:%M:%S'))
    logger.addHandler(filehandler)

    daemon = MyDaemon(config.path['run'] + 'server-keeper.pid')
    if len(sys.argv) == 2:
        logger.info('{} {}'.format(sys.argv[0], sys.argv[1]))

        if 'start' == sys.argv[1]:
            daemon.start()
        elif 'stop' == sys.argv[1]:
            daemon.stop()
        elif 'restart' == sys.argv[1]:
            daemon.restart()
        elif 'status' == sys.argv[1]:
            daemon.status()
        else:
            print("Unknown command")
            sys.exit(2)
        sys.exit(0)

    else:
        logger.warning('show cmd daemon usage')
        print("Usage: {} start|stop|restart".format(sys.argv[0]))
        sys.exit(2)
